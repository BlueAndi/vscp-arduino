/* The MIT License (MIT)
 *
 * Copyright (c) 2014 - 2020, Andreas Merkle
 * http://www.blue-andi.de
 * vscp@blue-andi.de
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/*******************************************************************************
    DESCRIPTION
*******************************************************************************/
/**
@brief  Control
@file   vscp_evt_control.h
@author Andreas Merkle, http://www.blue-andi.de

@section desc Description
Control functionality. One of the main concepts of VSCP is that it is an event driven protocol.
Commands are sent out as events to the network not as events to specific devices. A device can
belong to a zone which select limit events of interest for the particular node.. If there is a need
to control a specific device the registry model should be used. This is the only way to directly
control a device.

This file is automatically generated. Don't change it manually.

*******************************************************************************/

#ifndef __VSCP_EVT_CONTROL_H__
#define __VSCP_EVT_CONTROL_H__

/*******************************************************************************
    INCLUDES
*******************************************************************************/
#include <stdint.h>
#include "..\user\vscp_platform.h"

/*******************************************************************************
    COMPILER SWITCHES
*******************************************************************************/

/*******************************************************************************
    CONSTANTS
*******************************************************************************/

/*******************************************************************************
    MACROS
*******************************************************************************/

/*******************************************************************************
    TYPES AND STRUCTURES
*******************************************************************************/

/*******************************************************************************
    VARIABLES
*******************************************************************************/

/*******************************************************************************
    FUNCTIONS
*******************************************************************************/

/**
 * General event
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendGeneralEvent(void);

/* "Mute on/off" not supported. No frame defined. */

/* "(All) Lamp(s) on/off" not supported. No frame defined. */

/* "Open" not supported. No frame defined. */

/* "Close" not supported. No frame defined. */

/* "TurnOn" not supported. No frame defined. */

/* "TurnOff" not supported. No frame defined. */

/* "Start" not supported. No frame defined. */

/* "Stop" not supported. No frame defined. */

/* "Reset" not supported. No frame defined. */

/* "Interrupt" not supported. No frame defined. */

/* "Sleep" not supported. No frame defined. */

/* "Wakeup" not supported. No frame defined. */

/* "Resume" not supported. No frame defined. */

/* "Pause" not supported. No frame defined. */

/* "Activate" not supported. No frame defined. */

/* "Deactivate" not supported. No frame defined. */

/* "Reserved for future use" not supported. No frame defined. */

/* "Reserved for future use" not supported. No frame defined. */

/* "Reserved for future use" not supported. No frame defined. */

/* "Dim lamp(s)" not supported. No frame defined. */

/* "Change Channel" not supported. No frame defined. */

/* "Change Level" not supported. No frame defined. */

/* "Relative Change Level" not supported. No frame defined. */

/* "Measurement Request" not supported. No frame defined. */

/* "Stream Data" not supported. No frame defined. */

/* "Sync" not supported. No frame defined. */

/* "Zoned Stream Data" not supported. No frame defined. */

/* "Set Pre-set" not supported. No frame defined. */

/* "Toggle state" not supported. No frame defined. */

/* "Timed pulse on" not supported. No frame defined. */

/* "Timed pulse off" not supported. No frame defined. */

/* "Set country/language" not supported. No frame defined. */

/* "Big Change level" not supported. No frame defined. */

/* "Move shutter up" not supported. No frame defined. */

/* "Move shutter down" not supported. No frame defined. */

/* "Move shutter left" not supported. No frame defined. */

/* "Move shutter right" not supported. No frame defined. */

/* "Move shutter to middle position" not supported. No frame defined. */

/* "Move shutter to preset position" not supported. No frame defined. */

/* "(All) Lamp(s) on" not supported. No frame defined. */

/* "(All) Lamp(s) off" not supported. No frame defined. */

/* "Lock" not supported. No frame defined. */

/* "Unlock" not supported. No frame defined. */

/**
 * PWM set
 * 
 * @param[in] repeats Repeat/counter: 0=repeat forever, >0 number of repeats
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] control Control byte.
 * @param[in] timeOn Time-On
 * @param[in] timeOff Time-Off
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendPwmSet(uint8_t repeats, uint8_t zone, uint8_t subZone, uint8_t control, uint16_t timeOn, uint16_t timeOff);

/**
 * Lock with token
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] token Token. This token can be 1-5 bytes and length of event is set accordingly. It
 * should be interpreted as an unsigned integer in the range 0-1099511627775. MSB byte is stored in
 * first byte. (array[5])
 * @param[in] tokensize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendLockWithToken(uint8_t reserved, uint8_t zone, uint8_t subZone, uint8_t const * const token, uint8_t tokenSize);

/**
 * Unlock with token
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] token Token. This token can be 1-5 bytes and length of event is set accordingly. It
 * should be interpreted as an unsigned integer in the range 0-1099511627775. MSB byte is stored in
 * first byte. (array[5])
 * @param[in] tokensize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendUnlockWithToken(uint8_t reserved, uint8_t zone, uint8_t subZone, uint8_t const * const token, uint8_t tokenSize);

/**
 * Set security level
 * 
 * @param[in] securityLevel Security level to set. 0-255 (Higher value is higher security level).
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendSetSecurityLevel(uint8_t securityLevel, uint8_t zone, uint8_t subZone);

/**
 * Set security pin
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] securityPin Security pin. This pin can be 1-5 bytes and length of event is set
 * accordingly. It should be interpreted as an unsigned integer in the range 0-1099511627775. MSB byte
 * is stored in first byte. (array[5])
 * @param[in] securityPinsize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendSetSecurityPin(uint8_t reserved, uint8_t zone, uint8_t subZone, uint8_t const * const securityPin, uint8_t securityPinSize);

/**
 * Set security password
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] securityPassword Security password. This password can be 1-5 bytes and length of event
 * is set accordingly. It should be interpreted as an UTF-8 string with a length set bt event data
 * length - 3 (array[5])
 * @param[in] securityPasswordsize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendSetSecurityPassword(uint8_t reserved, uint8_t zone, uint8_t subZone, uint8_t const * const securityPassword, uint8_t securityPasswordSize);

/**
 * Set security token
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * @param[in] token Token. This token can be 1-5 bytes and length of event is set accordingly. It
 * should be interpreted as an unsigned integer in the range 0-1099511627775. MSB byte is stored in
 * first byte. (array[5])
 * @param[in] tokensize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendSetSecurityToken(uint8_t reserved, uint8_t zone, uint8_t subZone, uint8_t const * const token, uint8_t tokenSize);

/**
 * Request new security token
 * 
 * @param[in] reserved Not used.
 * @param[in] zone Zone for which event applies to (0-255). 255 is all zones.
 * @param[in] subZone Sub-zone for which event applies to (0-255). 255 is all sub-zones.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_control_sendRequestNewSecurityToken(uint8_t reserved, uint8_t zone, uint8_t subZone);

#endif  /* __VSCP_EVT_CONTROL_H__ */
